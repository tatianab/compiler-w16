Parsing program...
Declared variable a_-1
Declared variable b_-1
Generated move instruction 0 : move #1 a_0
Generated move instruction 1 : move #2 b_1
Parsing if statement.
Generated add instruction 4 : add a_0 #1
Generated move instruction 5 : move (4) a_5
Generated add instruction 7 : add b_1 #1
Generated move instruction 8 : move (7) b_8
Parsing if statement.
Generated sub instruction 13 : sub a_9 #1
Generated move instruction 14 : move (13) a_14
Deleting from child instructions
Deleting instruction 15 : bra
Function OutputNum(var0) with 1 params.
Function OutputNum(var0) with 1 params.
Converting variables to instructions...
Setting instruction dominators...
Eliminating dead code...
Eliminating common subexpressions...
Copy propagation...
CP: 0 : move #1 (0)
Don't delete me: 0 : move #1 (0)
CP: 1 : move #2 (1)
Don't delete me: 1 : move #2 (1)
CP: 5 : move (4) (5)
Deleting from child instructions
Deleting instruction 5 : move (4) (5)
CP: 8 : move (7) (8)
Deleting from child instructions
Deleting instruction 8 : move (7) (8)
CP: 14 : move (13) (14)
Deleting from child instructions
Deleting instruction 14 : move (13) (14)
Precomputing constant values...
Cleaning up deleted instructions...
Testing 0 : move #1 (0)
Testing 1 : move #2 (1)
Testing 2 : cmp (0) (1)
Testing 3 : ble (2) [3]
Testing 4 : add (0) #1
Testing 5 deleted.
Testing 6 : bra [4]
Testing 7 : add (1) #1
Testing 8 deleted.
Testing 9 : PHI a_9 := (0) (4)
Testing 10 : PHI b_10 := (7) (1)
Testing 11 : cmp (9) (10)
Testing 12 : bge (11) [7]
Testing 13 : sub (9) #1
Testing 14 deleted.
Testing 15 deleted.
Testing 16 : PHI a_16 := (9) (13)
Testing 17 : write (16)
Testing 18 : write (10)
Testing 19 : end
Dumbly allocating registers...
child: 0 : move #1 (0) 0
child: 1 : move #2 (1) 0
# of unscheduled instruction: 2
[0 : move #1 (0), 1 : move #2 (1)]
# of cached instruction: 2
Scheduled: []
0 : move #1 (0)
Instr: 0 : move #1 (0)
Instruction: 0 : move #1 (0) Register ID: 1
Update register: 1 with value InstructionSchedule$InstructionValue@1540e19d
Schedule instruction: 0 : move #1 (0)
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: null
3: null
4: null
5: null
6: null
7: null
8: null

1 : move #2 (1)
Instr: 1 : move #2 (1)
Instruction: 1 : move #2 (1) Register ID: 2
Update register: 2 with value InstructionSchedule$InstructionValue@677327b6
Schedule instruction: 1 : move #2 (1)
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: null
4: null
5: null
6: null
7: null
8: null

Schedule Stat: 
Load: 0
Save: 0
Instr: 2
Total: 2
child: 2 : cmp (0) (1) 0
Parent: 0 : move #1 (0)
Parent: 1 : move #2 (1)
# of unscheduled instruction: 1
[2 : cmp (0) (1)]
# of cached instruction: 1
Scheduled: []
2 : cmp (0) (1)
Instr: 2 : cmp (0) (1)
Instruction: 2 : cmp (0) (1) Register ID: 3
Update register: 3 with value InstructionSchedule$InstructionValue@14ae5a5
Probe: 
2 : cmp (0) (1)
1 : move #2 (1)
Schedule instruction: 2 : cmp (0) (1)
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 2 : cmp (0) (1)
4: null
5: null
6: null
7: null
8: null

Schedule Stat: 
Load: 0
Save: 0
Instr: 1
Total: 1
3 : ble (2) [3]
Instr: 3 : ble (2) [3]
child: 4 : add (0) #1 0
Parent: 0 : move #1 (0)
# of unscheduled instruction: 1
[4 : add (0) #1]
# of cached instruction: 1
Scheduled: []
4 : add (0) #1
Instr: 4 : add (0) #1
Instruction: 4 : add (0) #1 Register ID: 3
Update register: 3 with value InstructionSchedule$InstructionValue@7f31245a
Schedule instruction: 4 : add (0) #1
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 4 : add (0) #1
4: null
5: null
6: null
7: null
8: null

Schedule Stat: 
Load: 0
Save: 0
Instr: 1
Total: 1
6 : bra [4]
Instr: 6 : bra [4]
Total: 2
child: 7 : add (1) #1 0
Parent: 1 : move #2 (1)
# of unscheduled instruction: 1
[7 : add (1) #1]
# of cached instruction: 1
Scheduled: []
7 : add (1) #1
Instr: 7 : add (1) #1
Instruction: 7 : add (1) #1 Register ID: 3
Update register: 3 with value InstructionSchedule$InstructionValue@6d6f6e28
Schedule instruction: 7 : add (1) #1
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 7 : add (1) #1
4: null
5: null
6: null
7: null
8: null

Schedule Stat: 
Load: 0
Save: 0
Instr: 1
Total: 1
PHI
Update register: 1 with value InstructionSchedule$InstructionValue@135fbaa4
Update register: 3 with value InstructionSchedule$InstructionValue@45ee12a7
Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 7 : add (1) #1
4: null
5: null
6: null
7: null
8: null

child: 11 : cmp (9) (10) 0
Parent: 9 : PHI a_9 := (0) (4)
Parent: 10 : PHI b_10 := (7) (1)
# of unscheduled instruction: 1
[11 : cmp (9) (10)]
# of cached instruction: 1
Scheduled: []
Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 7 : add (1) #1
4: null
5: null
6: null
7: null
8: null

Release: [3, 2]
Schedule Stat: 
Load: 0
Save: 0
Instr: 0
Total: 0
child: 11 : cmp (9) (10) 0
Parent: 9 : PHI a_9 := (0) (4)
Parent: 10 : PHI b_10 := (7) (1)
# of unscheduled instruction: 1
[11 : cmp (9) (10)]
# of cached instruction: 1
Scheduled: []
11 : cmp (9) (10)
Instr: 11 : cmp (9) (10)
Instruction: 11 : cmp (9) (10) Register ID: 3
Update register: 3 with value InstructionSchedule$InstructionValue@330bedb4
Probe: 
11 : cmp (9) (10)
10 : PHI b_10 := (7) (1)
Schedule instruction: 11 : cmp (9) (10)
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 11 : cmp (9) (10)
4: null
5: null
6: null
7: null
8: null

Schedule Stat: 
Load: 0
Save: 0
Instr: 1
Total: 1
12 : bge (11) [7]
Instr: 12 : bge (11) [7]
child: 13 : sub (9) #1 0
Parent: 9 : PHI a_9 := (0) (4)
# of unscheduled instruction: 1
[13 : sub (9) #1]
# of cached instruction: 1
Scheduled: []
13 : sub (9) #1
Instr: 13 : sub (9) #1
Instruction: 13 : sub (9) #1 Register ID: 3
Update register: 3 with value InstructionSchedule$InstructionValue@2503dbd3
Schedule instruction: 13 : sub (9) #1
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 13 : sub (9) #1
4: null
5: null
6: null
7: null
8: null

Schedule Stat: 
Load: 0
Save: 0
Instr: 1
Total: 1
Total: 1
PHI
Update register: 1 with value InstructionSchedule$InstructionValue@4b67cf4d
Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 11 : cmp (9) (10)
4: null
5: null
6: null
7: null
8: null

child: 17 : write (16) 0
Parent: 16 : PHI a_16 := (9) (13)
child: 18 : write (10) 0
Parent: 10 : PHI b_10 := (7) (1)
# of unscheduled instruction: 2
[17 : write (16), 18 : write (10)]
# of cached instruction: 2
Scheduled: []
17 : write (16)
Instr: 17 : write (16)
Schedule instruction: 17 : write (16)
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 11 : cmp (9) (10)
4: null
5: null
6: null
7: null
8: null

18 : write (10)
Instr: 18 : write (10)
Schedule instruction: 18 : write (10)
Register Context: Reg: 
0: null
1: 0 : move #1 (0)
2: 1 : move #2 (1)
3: 11 : cmp (9) (10)
4: null
5: null
6: null
7: null
8: null

Schedule Stat: 
Load: 0
Save: 0
Instr: 2
Total: 2
Total: 3
Total: 2
Total: 0
Total: 1
Total: 2
Total: 2
Main Size: 2
Main: 
Block:0 
#instructions: 2
move R1 C1 C0
move R2 C2 C0
Next 1: 1

Block:1 
#instructions: 2
cmp R3 R1 R2
ble R-1 R3 C0
Next 1: 2
Next 2: 3

Block:2 
#instructions: 4
add R3 R1 C1
bra R-1 C0 C0
move R1 R3 C0
move R3 R2 C0


Block:3 
#instructions: 1
add R3 R2 C1
Next 1: 4

Block:4 
#instructions: 0
Next 1: 5

Block:5 
#instructions: 2
cmp R3 R1 R3
bge R-1 R3 C0
Next 1: 6
Next 2: 7

Block:6 
#instructions: 2
sub R3 R1 C1
move R1 R3 C0


Block:7 
#instructions: 3
write R-1 R1 C0
write R-1 R3 C0
end R-1 C0 C0





Allocated registers:
Main: 
Block:0 
#instructions: 2
move R1 C1 C0
move R2 C2 C0
Next 1: 1

Block:1 
#instructions: 2
cmp R3 R1 R2
ble R-1 R3 C0
Next 1: 2
Next 2: 3

Block:2 
#instructions: 4
add R3 R1 C1
bra R-1 C0 C0
move R1 R3 C0
move R3 R2 C0
Next 1: 4

Block:4 
#instructions: 0
Next 1: 5

Block:5 
#instructions: 2
cmp R3 R1 R3
bge R-1 R3 C0
Next 1: 6
Next 2: 7

Block:6 
#instructions: 2
sub R3 R1 C1
move R1 R3 C0


Block:7 
#instructions: 3
write R-1 R1 C0
write R-1 R3 C0
end R-1 C0 C0





Block:3 
#instructions: 1
add R3 R2 C1
Next 1: 4

Block:4 
#instructions: 0
Next 1: 5

Block:5 
#instructions: 2
cmp R3 R1 R3
bge R-1 R3 C0
Next 1: 6
Next 2: 7

Block:6 
#instructions: 2
sub R3 R1 C1
move R1 R3 C0


Block:7 
#instructions: 3
write R-1 R1 C0
write R-1 R3 C0
end R-1 C0 C0






Generating native code...
Translating instruction 0 : move #1 (0)
Translating instruction 1 : move #2 (1)
Translating instruction 2 : cmp (0) (1)
ERROR: Invalid arguments to instruction 2 : cmp (0) (1)
